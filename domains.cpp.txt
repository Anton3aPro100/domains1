#include <algorithm>
#include <iostream>
#include <string>
#include <sstream>
#include <string_view>
#include <vector>

using namespace std;

class Domain {
    // разработайте класс домена
public:    
    Domain(const string& str){
        
        string word = "";
        for (char c : str){
            if (c == '.'){
                words_.push_back(word);
                word = "";
            }
            else {
                word += c;
            }
        }
        words_.push_back(word);
        reverse(words_.begin(), words_.end());
    }
    
    bool operator==(const Domain& another) const{
        if (words_.size() != another.words_.size()){
            return false;
        }
        for (size_t i = 0 ; i < words_.size(); ++i){
            if (words_[i] != another.words_[i]){
                return false;
            }
        }
        return true;
    }
    
    bool operator< (const Domain& another) const{
        size_t sz = min(words_.size(),another.words_.size());
        for (size_t i = 0; i < sz; ++i){
            if (words_[i] < another.words_[i]){
                return true;
            }
            if (words_[i] > another.words_[i]){
                return false;
            }
        }
        if (words_.size() < another.words_.size()){
            return true;
        }
        else{
            return false;
        }
    }
    
    bool IsSubdomain(const Domain& another) const{
        if (words_.size() <= another.words_.size()){
            return false;
        }
        for (size_t i = 0 ; i < another.words_.size(); ++i){
            if (words_[i] != another.words_[i]){
                return false;
            }
        }
        return true;
    }
    
    void Print() const{
        for (const string& word : words_){
            cout<<word<<" ";
        }
        cout <<endl;
    }
    // конструктор должен позволять конструирование из string, с сигнатурой определитесь сами
    
    // разработайте operator==

    // разработайте метод IsSubdomain, принимающий другой домен и возвращающий true, если this его поддомен
private:
    vector<string> words_;
};

class DomainChecker {
public:
    template <typename Iter>
    DomainChecker(Iter start_it, Iter end_it){
        while (start_it != end_it){
            forbidden_domains_.push_back(*start_it);
            start_it++;
        }
        sort(forbidden_domains_.begin(),forbidden_domains_.end());
        auto last = unique(forbidden_domains_.begin(), forbidden_domains_.end(),[](const Domain& lhs, const Domain& rhs){return (rhs.IsSubdomain(lhs) || rhs == lhs);});

        forbidden_domains_.erase(last, forbidden_domains_.end());
    }
    
    void Print() const {
        for (const Domain& domain : forbidden_domains_){
            domain.Print();
        }
    }
    // конструктор должен принимать список запрещённых доменов через пару итераторов
    bool IsForbidden(const Domain& domain) const{
        auto iter = upper_bound(forbidden_domains_.begin(),forbidden_domains_.end(),domain);
        if (iter == forbidden_domains_.begin()){
            return false;
        }
        iter--;
        if (*iter == domain || domain.IsSubdomain(*iter)){
            return true;
        }
        return false;
    }
    // разработайте метод IsForbidden, возвращающий true, если домен запрещён
private:
    vector<Domain> forbidden_domains_;
    
};

// разработайте функцию ReadDomains, читающую заданное количество доменов из стандартного входа
vector<Domain> ReadDomains(istream& input, size_t n){
    vector<Domain> res;
    for (size_t i = 0; i < n; ++i){
        string line;
        getline(input, line);
        Domain new_domain(line);
        res.push_back(new_domain);
    }
    return res;
}

template <typename Number>
Number ReadNumberOnLine(istream& input) {
    string line;
    getline(input, line);

    Number num;
    std::istringstream(line) >> num;

    return num;
}

int main() {
    const std::vector<Domain> forbidden_domains = ReadDomains(cin, ReadNumberOnLine<size_t>(cin));
    DomainChecker checker(forbidden_domains.begin(), forbidden_domains.end());
   // checker.Print();

    const std::vector<Domain> test_domains = ReadDomains(cin, ReadNumberOnLine<size_t>(cin));
    for (const Domain& domain : test_domains) {
        cout << (checker.IsForbidden(domain) ? "Bad"sv : "Good"sv) << endl;
    }
    
}